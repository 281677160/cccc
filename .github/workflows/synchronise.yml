
#
# 同步上游仓库或者清理发布都需要用REPO_TOKEN密匙
#
# 记住，同步上游是不会同步您任何自建文件夹的，所以同步后您要自己对比我现有的文件夹里面diy-part.sh和settings.ini文件有没有更新
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#


name: 同步上游仓库
on:
  workflow_dispatch:
    inputs:
      Synchro:
        description: '====同步上游仓库===='
        required: false
        default: 'false'
        type: boolean
      fork:
        description: '请选择同步选项'
        required: false
        default: '单文件同步,带备份'
        type: choice
        options:
          - '不同步上游仓库,单纯消灭仓库的.bak备份文件'
          - '单文件同步,带备份'
          - '单文件同步,不要备份'
          - '拉取整个上游仓库覆盖您现在的仓库(无备份)'
      Establish:
        description: '====在build文件夹创建机型文件夹===='
        required: false
        default: 'false'
        type: boolean
      establish_sample:
        description: '输入build文件夹里有的源码为蓝本(文件夹名称)'
        default: ''
      establish_name:
        description: '您需要创建的文件夹名称'
        default: ''
      Deletefile:
        description: '====删除build里面的文件夹===='
        required: false
        default: 'false'
        type: boolean
      Deletefile_name:
        description: '请输入要删除的文件夹名称,一次删除多个请用英文逗号分开'
        default: ''
env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TONGBU_CANGKU: 1
  TZ: Asia/Shanghai

jobs:
  del_runs:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    
    name: 同步上游仓库
    
    steps:
    - name: 密匙检测（密匙为空则退出）
      run: |
        if [[ -z "${{ secrets.REPO_TOKEN }}" ]]; then
          echo "您没有设置仓库密匙，请按教程设置好密匙再来"
          echo "REPO_TOKEN密匙制作教程：https://git.io/jm.md"
          exit 1
        fi
    - name: 准备结束
      uses: actions/checkout@v3
      
    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y git subversion git-core wget curl grep
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        if [[ -z "${{ github.event.inputs.fork }}" ]]; then
          echo "again-fork=0" >> ${GITHUB_ENV}
        elif [[ "${{ github.event.inputs.fork }}" == '不同步上游仓库,单纯消灭仓库的.bak备份文件' ]]; then
          echo "again-fork=1" >> ${GITHUB_ENV}
        elif [[ "${{ github.event.inputs.fork }}" == '单文件同步,带备份' ]]; then
          echo "again-fork=2" >> ${GITHUB_ENV}
        elif [[ "${{ github.event.inputs.fork }}" == '单文件同步,不要备份' ]]; then
          echo "again-fork=3" >> ${GITHUB_ENV}
        elif [[ "${{ github.event.inputs.fork }}" == '拉取整个上游仓库覆盖您现在的仓库(无备份)' ]]; then
          echo "again-fork=4" >> ${GITHUB_ENV}
        fi
        
        if [[ -n "${{ github.event.inputs.establish_sample }}" ]] && [[ -n "${{ github.event.inputs.establish_name }}" ]]; then
          echo "inputs_Establish=1" >> ${GITHUB_ENV}
        fi
        
        if [[ -n "${{ github.event.inputs.Deletefile_name }}" ]]; then
          echo "inputs_Deletefile=1" >> ${GITHUB_ENV}
        fi
        
    - name: 同步更新上游仓库
      if: env.REPO_TOKEN  && github.event.inputs.Synchro == 'true' && env.again-fork != '0'
      run: |
        cd ${GITHUB_WORKSPACE}
        rm -rf shangyou && git clone -b main https://github.com/281677160/autobuild.git shangyou
        rm -rf repogx && git clone -b main https://github.com/${{github.repository}}.git repogx
        if [[ "${{ env.again-fork }}" == "1" ]]; then
          echo "不同步,单纯消灭仓库的.bak备份文件"
          export BENDI_SHANCHUBAK="1"
          bash <(curl -fsSL https://raw.githubusercontent.com/281677160/common-main/main/bendi/tongbu.sh)
        elif [[ "${{ env.again-fork }}" == "2" ]]; then
          echo "单文件同步,带备份"
          export BENDI_SHANCHUBAK="2"
          bash <(curl -fsSL https://raw.githubusercontent.com/281677160/common-main/main/bendi/tongbu.sh)
        elif [[ "${{ env.again-fork }}" == "3" ]]; then
          echo "单文件同步,不要备份"
          export BENDI_SHANCHUBAK="3"
          bash <(curl -fsSL https://raw.githubusercontent.com/281677160/common-main/main/bendi/tongbu.sh)
        elif [[ "${{ env.again-fork }}" == "4" ]]; then
          echo "拉取整个上游仓库覆盖您现在的仓库"
          rm -rf repogx/*
          cp -Rf shangyou/* repogx/
          rm -rf repogx/.github/workflows/*
          cp -Rf shangyou/.github/workflows/* repogx/.github/workflows/
        else
          echo "未知错误,关闭同步更新上游仓库"
          exit 1
        fi
        
    - name: 建立机型文件夹
      if: env.REPO_TOKEN && github.event.inputs.Establish == 'true' && env.inputs_Establish == '1'
      run: |
        if [[ ! -d shangyou ]]; then
          git clone -b main https://github.com/281677160/autobuild.git shangyou
        fi
        if [[ ! -d repogx ]]; then
          rm -rf repogx && git clone -b main https://github.com/${{github.repository}}.git repogx
        fi
        aa="${{ github.event.inputs.establish_sample }}"
        bb="${{ github.event.inputs.establish_name }}"
        if [[ ! -d "repogx/build/${bb}" ]]; then
          cp -Rf repogx/build/"${aa}" repogx/build/"${bb}"
          echo "[${bb}]文件夹创建完成"
        else
          echo "[${bb}]文件夹已存在"
        fi
        SOURCE_CODE1="$(grep 'SOURCE_CODE=' "repogx/build/${bb}/settings.ini" | cut -d '"' -f2)"
        if [[ "${SOURCE_CODE1}" == "AMLOGIC" ]]; then
          cp -Rf shangyou/.github/workflows/Amlogic.yml repogx/.github/workflows/${bb}.yml
          nn="Amlogic"
        elif [[ "${SOURCE_CODE1}" == "IMMORTALWRT" ]]; then
          cp -Rf shangyou/.github/workflows/Immortalwrt.yml repogx/.github/workflows/${bb}.yml
          nn="Immortalwrt"
        elif [[ "${SOURCE_CODE1}" == "COOLSNOWWOLF" ]]; then
          cp -Rf shangyou/.github/workflows/Lede.yml repogx/.github/workflows/${bb}.yml
          nn="Lede"
        elif [[ "${SOURCE_CODE1}" == "LIENOL" ]]; then
          cp -Rf shangyou/.github/workflows/Lienol.yml repogx/.github/workflows/${bb}.yml
          nn="Lienol"
        elif [[ "${SOURCE_CODE1}" == "OFFICIAL" ]]; then
          cp -Rf shangyou/.github/workflows/Official.yml repogx/.github/workflows/${bb}.yml
          nn="Official"
        elif [[ "${SOURCE_CODE1}" == "XWRT" ]]; then
          cp -Rf shangyou/.github/workflows/Xwrt.yml repogx/.github/workflows/${bb}.yml
          nn="Xwrt"
        fi
        
        yml_name="$(grep 'name:' "repogx/.github/workflows/${bb}.yml"  |grep -v '^#' |awk 'NR==1')"
        sed -i "s?${yml_name}?name: ${nn}-${bb}?g" "repogx/.github/workflows/${bb}.yml"
        
        TARGE1="target: \\[.*\\]"
        TARGE2="target: \\[${bb}\\]"
        sed -i "s/${TARGE1}/${TARGE2}/g" repogx/.github/workflows/${bb}.yml
        
    - name: 删除不需要的机型文件夹
      if: env.REPO_TOKEN && github.event.inputs.Deletefile == 'true' && env.inputs_Deletefile == '1'
      run: |
        if [[ ! -d repogx ]]; then
          rm -rf repogx && git clone -b main https://github.com/${{github.repository}}.git repogx
        fi
        aa="${{ github.event.inputs.Deletefile_name }}"
        bb=(${aa//,/ })
        for cc in ${bb[@]}; do
          if [[ -d "repogx/build/${cc}" ]]; then
            rm -rf repogx/build/"$cc"
            rm -rf $(grep -rl "target: \[$cc\]" "repogx/.github/workflows" |sed 's/^[ ]*//g' |grep -v '^#\|compile')
            echo "已删除[${cc}]文件夹"
          else
            echo "[${cc}]文件夹不存在"
          fi
        done
        
    - name: 执行程序
      if: github.event.inputs.Deletefile == 'true' || github.event.inputs.Establish == 'true' || github.event.inputs.Synchro == 'true'
      run: |
        sudo chmod -R +x ${GITHUB_WORKSPACE}/repogx
        cd ${GITHUB_WORKSPACE}/repogx
        git add .
        git commit -m "Update $(date +%Y-%m%d-%H%M%S)"
        git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
        echo "删除机型文件夹完成!"
